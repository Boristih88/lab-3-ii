#!/usr/bin/env python3
# -*- coding: utf-8 -*-

from collections import deque


class Node:
    def __init__(self, state, parent=None):
        self.state = state  # текущий город/узел
        self.parent = parent  # предыдущий узел в пути

    def path(self):
        # Восстанавливает путь, идя от конечного узла к начальному
        node, path_back = self, []
        while node:
            path_back.append(node.state)
            node = node.parent
        return path_back[::-1]  # Путь в прямом порядке


class FIFOQueue:
    def __init__(self, initial=None):
        self.queue = deque(initial) if initial else deque()

    def pop(self):
        return self.queue.popleft() if self.queue else None

    def appendleft(self, item):
        self.queue.append(item)

    def __bool__(self):
        return len(self.queue) > 0


def expand(graph, node):
    """Генерирует дочерние узлы для текущего узла."""
    for neighbor, _ in graph.get(node.state, []):
        yield Node(neighbor, node)


class Problem:
    def __init__(self, initial, goal):
        self.initial = initial
        self.goal = goal

    def is_goal(self, state):
        return state == self.goal


failure = None  # Значение для обозначения неудачи


def breadth_first_search(problem, graph):
    node = Node(problem.initial)
    if problem.is_goal(node.state):
        return node.path(), 0  # Если начальная точка уже является целью

    frontier = FIFOQueue([node])
    reached = {problem.initial: 0}  # Хранит минимальные расстояния до узлов

    while frontier:
        node = frontier.pop()
        current_distance = reached[node.state]

        for child in expand(graph, node):
            s = child.state
            if problem.is_goal(s):
                # Вычисление общей стоимости пути
                total_distance = current_distance + next(
                    weight for neighbor, weight in graph[node.state] if neighbor == s
                )
                return child.path(), total_distance

            # Добавляем в очередь только непосещенные или если найден более короткий путь
            if s not in reached:
                edge_weight = next(weight for neighbor, weight in graph[node.state] if neighbor == s)
                reached[s] = current_distance + edge_weight
                frontier.appendleft(child)

    return failure, float("inf")  # если пути не существует


# Пример использования
if __name__ == "__main__":
    # Граф представлен в виде списка смежности
    graph = {
        1: [(2, 44), (19, 53)],
        2: [(1, 44), (3, 35), (13, 89)],
        3: [(2, 35), (4, 58), (6, 47)],
        4: [(3, 58), (5, 48)],
        5: [(4, 48), (7, 37)],
        6: [(3, 47), (7, 62),],
        7: [(5, 37), (6, 62), (8, 83)],
        8: [(7, 83), (9, 45)],
        9: [(8, 45), (10, 13)],
        10: [(9, 13), (11, 23)],
        11: [(10, 23), (12, 35)],
        12: [(11, 35), (14, 80), (16, 35)],
        13: [(2, 89), (14, 47), (15, 47)],
        14: [(13, 47), (12, 80)],
        15: [(13, 47), (16, 51)],
        16: [(12, 35), (15, 51), (17, 48)],
        17: [(16, 48), (18, 98)],
        18: [(17, 98), (19, 50)],
        19: [(18, 50), (1, 53)],

    }

    start = 1
    goal = 8
    problem = Problem(start, goal)
    path, distance = breadth_first_search(problem, graph)
    print("Кратчайший путь:", path)
    print("Длина пути:", distance)
